= Ruby Curious
Past instructors include Adam Bair, Pradeep Elankumaran, and Paul Ostazeski

=== Description
In this course we'll introduce you to the wonderfully curious world of Ruby. You've heard the hype and can no longer hold back you brain's intrinsic thirst for knowledge. Will it make you toast in the morning? Is it your best friend? Can it really solve world hunger?

=== Installfest

* Who needs help getting ruby up and running on their machines?

=== Windows

* Download and run the Ruby installer

    http://rubyinstaller.org

* Make sure that c:\Ruby\bin is in your path
* Test Ruby from the command line

    ruby -v  #=> should give you a version number
    irb      #=> should load Interactive Ruby
    gem -v   #=> should give you a version number

* Install you preferred text editor
  - We recommend E for this class (basically Textmate for windows)

    http://www.e-texteditor.com/

  - You may also want to consider using Vim.

    http://www.vim.org/download.php

=== OSX

You can use the version of Ruby that is included with OSX but I find that it makes life easier in the long run to reinstall Ruby through Macports. You can easily update Ruby and anything that you install from Macports will be aware of your updated version.

* Make sure you install the Developer Tools which includes XCode and the GCC compiler.
* You can install this from the 2nd disk that comes with OSX called 'Developer Tools'
* If you don't have this disk you can download XCode from Apple (about 700MB)
  
  http://developer.apple.com/mac

* Download and install Macports

    http://www.macports.org/install.php

* Verify that Macports is installed correctly

    port #=> then type quit to exit

* Install Ruby via Macports

    sudo port install ruby

* Make sure that you update your path so that /usr/local/bin is first
  - This will ensure that binaries installed by Macports are picked up before the OSX version.

* Verify that Ruby is installed correctly

    ruby -v  #=> should give you a version number
    irb      #=> should load Interactive Ruby

* Install you preferred text editor
  - We recommend Textmate for this class.

    http://macromates.com/

  - You may also want to consider using Vim.

    http://www.vim.org/download.php

=== Linux

* Use whatever package manager your comfortable with (yum, apt, portage, etc)
* Install ruby, rubygems, and sqlite3
* The instructions should be about the same as OSX
* Just substitute Macports with the package manager of your choice
* Install your preferred editor

=== Introduction

* not the typical slideshow class, more interactive than that.
* follow along, type stuff in, get help on the fly
* speak up, ask questions, offer opinions
* remember, learning is fun ;)

=== History
* ruby is almost 15 years old
* conceived by Yukihiro Matsumoto (Matz) in 1993
* first public release (0.95) in december 95
* 1.0 was released on christmas of 96
* Ruby-talk mailing list started when ruby 1.3 was released in 99

=== Philosphy
* Matz designed Ruby with programmer productivity and happiness in mind
* Takes the focus away from making the machine run faster ** but instead making the programmer faster, happier and more productive.
* Ruby follows the principals of the Path of Least Surprise (POLS?). The language was designed to be consistent in how it operates so that ruby programmers can usually guess the right method to use or how something is going to respond/perform/etc.
  
  example:
    String#upcase has a matching #downcase method
    instead of upper and lower (choosing up/down instead for logical consistency)

* Ruby is awesome. It's just more fun to say than Python... way more fun to say then Perl.

* "Ruby is optimized for beauty. Try to imagine better modes of expression. Violations of beauty reveal mistakes. Do that enough and you will innovate." --Marcel Molina Jr. Beautiful Code

=== An Introduction to the Ruby Environment
* most Ruby files have an .rb extension
* you can run a Ruby file by typing
    ruby filename.rb
* Ruby is an intepreted language (not compiled), read line by line by the Ruby interpreter

=== Interactive Ruby Console (irb)
* You can execute live Ruby code on the fly
* A great place to test out simple Ruby code

    irb # will allow you to type ruby code directly into the interpreter

=== Getting Help
* Ruby comes with local documentation installed on your computer called 'ri'
* You can use the command line tool 'ri' to look up documentation
* ex 'ri Array#length' will give you the proper documentation
* You can also use Google: 'Ruby String' will give you the docs on ruby-docs.org

* Question: What does 'ri' stand for?
    # Ruby Interactive (not to be confused with Interactive Ruby or irb)

=== Variables
* store anything
* created on the fly
* starts with a lower*case letter
* contains numbers, underscores, or dashes
* instance variables start with an at sign (@)
* class variables start with a double at sign (@@)

    name  = 'jack'
    happy = 'sad'
    sum   = 1+1
    names = ['adam', 'jack', 'fred']

    # these are all variables

* Question: how do you list all active variables?
    local_variables
    instance_variables
    global_variables

=== Basic Operators

* =   assignment operator
* ==  comparison operator
* === case equality operator
* +   addition/concatenation
* -   subtraction
* *   multiplication
* /   division
* %   modulus (division remainder)

* Question: What is the case equality operator?

    # Triple equals (or treequals?) essentially gives you a placeholder 
    # to define arbitrary relationships between objects

=== Comments

    # denotes a comment
    # this is not executed by the Ruby interpreter

=== Printing to the Screen

    puts  #=> print a line to the screen automatically adding a new line character
    print #=> print a line to the screen without adding a new line character
    gets  #=> get information from the user (gets.chomp will remove newlines \n)
    p     #=> pretty print an object

* Question: Where is puts/gets defined? 

    # The Kernel module.
    # http://www.ruby-doc.org/core/classes/Kernel.html

=== Lab 01: Hello World [ 01_hello_world.rb ]
* Create a ruby file
* Display 'hello world' when the file is run
* (you can run the file by typing 'ruby name_of_file.rb'

=== Objectect Inspection
* object.inspect will give you good information on an object
* works well when debugging
* commonly used like:

    puts something.inspect
    p something #=> is shorthand for puts something.inspect

=== Strings
* double quotes WILL evaluate it's contents and is called 'string interpolation'
    happy = 'smiles'
    "I'm full of #{happy}!" #=> "I'm full of smiles!"

* single quotes will NOT interpolate and execute

    'Happy'           #=> 'happy'
    "Happy #{1+1}"    #=> 'happy 2'
    'Happy ' + 2.to_s #=> 'happy 2'
    'Happy ' += 2     #=> 'happy 2'
    'Happy'.length    #=> 5
    'Happy'.reverse   #=> 'yppaH'
    'Happy'.downcase  #=> 'happy'

* Question: Which is an alias - String#length or #size?
    # size is an alias to the length method

=== Lab 02: What is your name? [ 02_get_name.rb ]
* Ask the user for their name
* Capture the name to a variable
* Perform a string operation on their name (reverse, upcase, etc)
* Display the result on screen

=== String Operations

* cast a non-String to a String

    5       #=> 5
    5.to_s  #=> "5"

* sub-strings

    "hello"[0,  1] #=> 'h'
    "hello"[0,  2] #=> 'he'
    "hello"[-1, 1] #=> 'o'

* String#split
    
    "This is a test".split #=> ["This", "is", "a", "test"]
    "zomg".split(//)       #=> ["z", "o", "m", "g"] 
    "zomg".split('o')        #=> ["z", "mg"] 

* Question: How do you split a string while keeping the delimiter? 

    'this,is,a,test'.split(/(,)/)
      #=> ["this", ",", "is", ",", "a", ",", "test"]

    # This regex technique is called a 'backreference'

=== Lab 03: Pig Latin [ 03_pig_latin.rb ]
* Ask the user for a word
* Translate the word to pig latin
* Display the translation on screen
* Pig Latin algorithm:
* -take the first letter of the word
* -move it to the end
* -add ay

=== Symbols
* identifiers or immutable strings
* symbols look like :this

    happy = :smile
  
=== Integers/Fixnum
    1       #=> 1
    1+1     #=> 2
    1.zero? #=> false

    1.upto(10) do |number|
      puts number
    end

    # dividing two integers performs integer division
    3/1.5 #=> float
    3/2   #=> 1

=== Arrays

    Array.new       #=> []
    []              #=> []
    [1,2]           #=> [1, 2]
    [1,2] + [3, 4]  #=> [1,2,3,4]
    [1,2,3].size    #=> 3

=== Iteration / Enumerable

* standard block format

    ['car', 'truck'].each do |word|
      puts word
    end

* shorthand block format

    ['car', 'truck'].each {|word| puts word}

* map/collect #=> returns a collection
    
    test = ['car', 'truck'].map{|w| w.reverse} #=> ['rac', 'kcurt']

* Question: Which is an alias - map or collect?
    # the documentation isn't clear but the method in the ruby source code
    # is called collect.

* inject (awesome)
    # iterates over a collection but provides a persistent variable across all iterations

    numbers = [1, 2, 3]
    numbers.inject(0) {|sum, num| sum += num} #=> 6

    # which is functionally equivilent to:

    numbers = [1, 2, 3]
    sum = 0
    numbers.each {|num| sum += num}
    sum #=> 6

=== Array#join

    ["This", "is", "a", "test"].join       #=> "This is a test"
    ["This", "is", "a", "test"].join(", ") #=> "This, is, a, test"
    ["This", "is", "a", "test"].join("|")  #=> "This|is|a|test"
  
=== Lab 04: Full-on Pig Latin [ 04_full_on_pig_latin.rb ]
* Convert a sentence to pig latin with help from lab 3 (Pig Latin)
* ...there may be edge cases ("th")

=== Ranges
    "a".."z".each {|char| puts char}   #=> prints the alphabet
    1..100.each {|num| puts num}       #=> counts from 1 to 100

    1.upto(10).each {|num| puts num}   #=> counts from 1 to 10 
    10.downto(1).each {|num| puts num} #=> counts from 10 to 1 
    
    (2..10).step(2).each {|n| puts n}  #=> print even numbers
    (1..10).step(2).each {|n| puts n}  #=> print odd numbers

=== Hashes
* Hashes in Ruby 1.8 are UNORDERED key/value pairs

    Hash.new        #=> {}
    {}              #=> {}
    {'name' => 'jack'}              #=> {'name' => 'jack'}
    {'name' => 'beth', 'age' => 22} #=> {'name' => 'beth', 'age' => 22}

    {'name' => 'beth', 'age' => 22}.each do |key, value|
      puts "#{key}:#{value}"
    end

    # Symbols as keys (common in Rails)
    {:oranges => 4.50, :apples => 3.20}

    # Values and keys
    {:oranges => 4.50, :apples => 3.20}.keys   #=> [:apples, :oranges]
    {:oranges => 4.50, :apples => 3.20}.values #=> [4.50, 3.20]

* Question: Is there a default data structure in Ruby that allows for duplicate keys?
    # No, not built in. There are libraries -- or you can build one.

=== Lab 05: Grocery List [ 05_grocery_list.rb ]
* create a list of groceries 
* print groceries with prices
* sum the prices (total)

=== Control structures

=== if/else
    
    if condition
      'do if true'
    else
      'do if false' #=> this is not going to happen
    end

    if name == 'adam'
      puts 'awesome'
    elsif name == 'paul'
      puts 'even more awesome'
    else
      puts 'students are awesome!'
    end
    
=== unless (opposite of if/else)

    unless condition
      'do if false'
    else
      'do if true'
    end

    # it's worth noting that unless cannot use elsif #=> unlessif doesn't exist ;)
    # this is much more useful when used as a statement modifier

=== ternary (single line if/else)

    condition ? 'do if true' : 'do if false'

    # beware, these are good for SIMPLE logic
    # nesting is a bad idea... ?:?:?:: doesn't make much sense.

=== statement modifiers
* ruby lets you do awesome things like this:

    print 'happy' if adam.happy?
    print 'happy' unless adam.sad?

    # statement modifiers almost read like english -- impressive ;)

=== case (Ruby's switch statement)
* case statments have TWO forms:

- 1.) Simple

    name = 'Jack'

    case
      when name == "Jack"
        'I am Jack'
      when name == "Jane"
        'I am Jane'
      else 
        'who am I'
    end                   #=> "I am Jack"

- 2.) Awesome

    name = 'Jack'

    case name
      when "Jack"
        'I am Jack'
      when "Jane"
        'I am Jane'
      else
        'who am I'
    end                   #=> "I am Jack"

=== Lab 06: Grocery List Commentary [ 06_grocery_list_commentary.rb ]
* Iterate over a list of groceries
* Print out cheap if the item is within a certain price range
* Print out expensive if the item is above a certain price

=== Methods

* Methods should be kept as short as possible without sacrificing readability.
* Your methods should be 5+-2 lines long 
* The average human can only keep 5+-2 things in short-term/working memory at a time
* If your methods frequently go above 5-7 lines you're making life tough on the person reading your code (this includes yourself)
* Long methods require you to continuously re-read in order to juggle pieces of information whereas a small method can be read once and internalized as a single chunk of functionality.
* "Always code as if the person who will maintain your code is a maniac serial killer who knows where you live"

* Quesiton: Is Ruby pass by reference or pass by value?
    # Ruby is pass by value
    # This can be deceiving as the passed object retains a link to the original which, 
    # in some cases, will allow the method to modify the original passed object
  
* no arguments

    def age
      22
    end

    age #=> 22

* with arguments

    def full_name(first_name, last_name)
      "#{first_name} #{last_name}"
    end

    full_name('adam', 'bair') #=> 'adam bair'

* splat arguments

    def mood(disposition, *everything_else)
      puts mood
      puts everything_else.inspect
    end

    mood('cheery', 4, 3, 'test', [5,6])
      #=> cheery
      #=> [4, 3, 'test', [5,6]] 

* Question: When is the splat operator used outside of method aguments?
    # split mode
    a, b, c = *[1,2,3]
      a #=> 1
      b #=> 2 
      c #=> 3 

    # collect mode
    a, b* = 1, 2, 3
      a #=> 1
      b #=> [2,3]

    # expand a range
    [*1..10] #=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

* return is implicit, last thing in a method will be returned

    def name
      'bently'
      'sven'
    end

    # would return 'sven'

* an explicit return will stop execution of that method on the line that called return 

    def name
      return 'bently'
      'sven'
    end

    # would return 'bently'

=== Method Suffixes
* *exclamation* *point*: usually indicates that something destructive is going to happen.

  - an example of this would be Array#sort!. The Array#sort! method modifies the current object instead of returning a new object with the modifications. Normally Ruby will make a copy of an object, do the requested operation, and return a copy with the changes leaving the original in-tact. An exclamation point avoids this copy and modifies the object directly.

    def break_something!
      # something destructive
    end

* *question* *mark*: implies that a boolean will be returned. In languages that lack method suffixes you would write some_array.is_empty to imply a boolean. Avoid is_empty? -- it's redundant: use a suffix or is_ but not both.

    def this_year?(year)
      Time.now.year == year
    end

=== Guard Clause (short-circuit)
* assists with readability - stop executing if this condition otherwise run the method
* if you see a guard clause, you only need to read the whole method half the time ;)

    # standard

    def happy(word)
      if word == 'happy'
        'happy'
      else
        'unhappy'
      end
    end

    # short-circuit version

    def happy(word)
      return 'happy' if word == 'happy'
      'unhappy'
    end

=== Lab 07: Lucky Number [ 07_lucky_number.rb ]
* Think of a number. We'll use that one.
* Create a method called lucky? 
* This method should take one number as an argument
* The method should return true or false if the argument is the lucky number

=== Open Classes
* if you want to change the behavior of an existing class
* all you need to do is open it an add methods

    class String
      def upcase_reverse
        self.upcase.reverse
      end
    end

    "adam".upcase_reverse #=> "MADA"

    # self refers to the current object/namespace

=== Lab 08: Implement Fixnum#lucky? [ 08_fixnum_lucky_number.rb ]
* Think of a number. We'll use that one.
* Open the standard Ruby Fixnum class
* Create a method called lucky? 
* The method should return true or false if the number is the lucky number

=== Classes
* classes begin with a capital letter
* class methods are defined def self.method_name
* class methods are only available to the class - not to the instance of the class
* private methods are only available within the current class
* protected methods are only avilable to objects of the same class

    class Dog

      def bark
        puts 'Woof'
      end

      def vitals
        "Blood Type: #{blood_type}"
      end

      def self.number_of_legs
        4
      end

      private
        def blood_type
          'F Positive'
        end
    end

    rex = Dog.new
    rex.bark             #=> "Woof"

    rex.number_of_legs  #=> undefined
    Dog.number_of_legs  #=> 4

    rex.blood_type      #=> NoMethodError: private method `blood_type'
    rex.vitals          #=> "Blood Type: F Positive"

=== Lab 09: Implement an Animal Class [ 09_animal_class.rb ]
* Create a class called 'Animal'
* Create a method called noise that returns a string

    * Class Inheritance
      shared behavior in the base class
      specific behavior in the subclass
      you can also override 

      class Vehicle
        def wheels
          4
        end
      end

      class Truck < Vehicle
        def four_wheel_drive?
          true
        end
      end

      Vehicle.new.wheels            #=> 4
      Vehicle.new.four_wheel_drive? #=> Undefined Method
      Truck.new.wheels              #=> 4
      Truck.new.four_wheel_drive?   #=> true

=== Lab 10: Subclass the Animal Class [ 10_animal_subclass.rb ]
* create an animal that has a noise method
* the noise method should return an empty string
* override the noise method in the subclass
    
=== Object Initialization
* initialize is a special method that is called anytime a new object is created

    class Vehicle
      def initialize
        puts "I'm being created"
      end
    end

    Vehicle.new #=> "I'm being created"

=== Instance Variables
* variables that are specific to a particular instantiated object
* always start with an '@' (at) sign

    class Vehicle
      def initialize(maker)
        @auto_maker = maker
      end

      def auto_maker
        @auto_maker
      end
    end

    Vehicle.new('saab').auto_maker #=> 'saab'
  
=== Accessors (awesome getter/setters)
    attr_reader :variable   #=> you can read the variable: car.variable
    attr_writer :variable   #=> you can write the variable: car.varible = 'something'
    attr_accessor :variable #=> shorthand for attr_writer + attr_reader

    class Vehicle
      attr_reader :auto_maker

      def initialize(maker)
        @auto_maker = maker
      end
    end

Vehicle.new('saab').auto_maker #=> 'saab'

=== Lab 11: Animal Names [ 11_animal_names.rb ]
* Using the Animal classes from lab 10
* Add an accessor called :name
* Create an intialize method that sets the name

=== Overflow/Extras (if we run out of time)

=== Modules
* collections of methods
* can be 'mixed in' with classes so that the classes respond to those methods
* nice way to organize specific or common functionality
* ex: Enumerable (each, inject, map)

    # Contrived Example

    module Human
      attr_accessor :name
      def initialize(name)
        @name = name
      end
    end

    class Person
      include Human
    end

    class Hero
      include Human
    end

    person = Person.new('adam')
    person.name   #=> 'adam' 

    hero = Hero.new('why')
    hero.name     #=> 'why' 

=== ARGV

* You can use the ARGV array to capture command line arguments

    ruby test.rb happy
    ARGV[0] would == 'happy'

=== YAML! It's baked right in!

    ['first', 'second', 'third'].to_yaml
      #=> "--- \n- first\n- second\n- third\n"

    {:apples => 5.30, :orange => 10.50}.to_yaml
      #=> "--- \n:apples: 5.3\n:orange: 10.5\n"

* Question: What does YAML stand for?
    # Yet Another Markup Language

* Serialize objects to a file

    # write yaml to a file
    open('filename', 'w') {|f| f << something.to_yaml}

* Marshal ruby objects from a file

    # read yaml from a file
    something = YAML.load(open('filename'))

=== Sinatra
* Sinatra is a tiny web framework built in Ruby

    # The most basic Sinatra application
    require 'rubygems'
    require 'sinatra'

    get '/' do
      'Hello World'
    end

    # Run the application by typing ruby name_of_file.rb
    # Sinatra will run on http://localhost:4567 by default
    # You can add additional urls by defining new get/post methods
    # Sinatra is AWESOME for small application/services
    # Additional information: http://www.sinatrarb.com/ 

=== Beautiful Code
* Marcel Molina gave an excellent talk at Ruby Hoedown 2007 called 'Beautiful Code'
* In this talk Marcel explores different definitions of beauty from classical literature and how they might apply to software design
* Beautiful code is the balanced application of Proportion, Integrity, and Clarity.

              Proportion
                  /\                [ each are necessary  ] 
                 /  \               [ none are sufficient ]
                /____\
      Integrity        Clarity

* Proportion: The smallest size needed to do the job. Economy of size and the ratio of pairs.
* Integrity: being well-suited for an intended purpose. He uses the example of a crystalline hammer - while it's quite beautiful, it sucks at fufuilling the role of a hammer (due to it's inherent fragility).
* Clarity: simple, mundane, understandable, pedestrian. The difference between sophistication and complication.
* http://rubyhoedown2007.confreaks.com/session09.html

=== Resources
* The Well-Grounded Rubyist by David A. Black 
  - http://www.amazon.com/Well-Grounded-Rubyist-David-Black/dp/1933988657

* The Ruby Programming Language by Yukihiro Matsumoto and David Flanagan 
  - http://www.amazon.com/Ruby-Programming-Language-David-Flanagan/dp/0596516177

* The Ruby Way 2nd Edition by Hal Fulton 
  - http://www.amazon.com/Ruby-Way-Second-Techniques-Programming/dp/0672328844

* Why's Poignant Guide to Ruby
  - http://mislav.uniqpath.com/poignant-guide/

* Mr. Neighborly's Humble Little Ruby Book
  - http://www.humblelittlerubybook.com/

* Ruby Cookbook
  - http://oreilly.com/catalog/9780596523695/

* Confreaks
  - http://www2.confreaks.com/events

* The Least Surprised in "The Red Scared"
  - http://www.youtube.com/watch?v=mXZ_htL1rOI
  - http://www.youtube.com/watch?v=ng95M-cRb44
  - http://www.youtube.com/watch?v=Du_RTMmofWM

* Theory - Smalltalk Best Practice Patterns by Kent Beck 
  - http://www.amazon.com/Smalltalk-Best-Practice-Patterns-Kent/dp/013476904X

* Theory - Refactoring: Improving the Design of Existing Code by Kent Beck and Martin Fowler
  - http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672


